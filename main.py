#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VK ID –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
"""
import sys
import time
import asyncio
import traceback

import schedule
import threading
import aiogram.utils.exceptions
import re
import html
from typing import Dict, Any, List, Union, Optional, Tuple
from datetime import datetime

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TELEGRAM_TOKEN, BOT_MESSAGES, BOT_ADMINS, UI_SETTINGS
from logger import logger, log_user_action, log_error
from api_client import api_client
from formatter import formatter
from database import db
from file_processing import extract_vk_links, extract_vk_id, extract_phone_from_vk_parsing, create_results_file, \
    process_vk_links

# Dictionary for caching results
cached_results = {}
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏
CACHE_CLEANUP_INTERVAL = 60 * 30  # 30 –º–∏–Ω—É—Ç


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM"""
    waiting_for_vk_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ VK ID
    waiting_for_phone = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    waiting_for_settings = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
settings_cb = CallbackData("settings", "action")
limit_cb = CallbackData("limit", "value")
lang_cb = CallbackData("lang", "value")
page_cb = CallbackData("page", "query_id", "page_id")


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db.save_user(user_id, username, first_name, last_name)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "started the bot")

    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! üëã

–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VK ID –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.

üì± –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ:
- VK ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345678 –∏–ª–∏ id12345678)
- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789)
- –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

üîç –Ø –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ–±—â—É –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

üìò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ parse_mode)
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested help")

    help_text = """
<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VK ID 
- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º VK –ø—Ä–æ—Ñ–∏–ª–µ–π

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ VK ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345678 –∏–ª–∏ id12345678)
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789)
3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /process_file –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ VK –ø—Ä–æ—Ñ–∏–ª–µ–π
4. –Ø –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/vk [ID] - –ü–æ–∏—Å–∫ –ø–æ VK ID
/phone [–Ω–æ–º–µ—Ä] - –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
/process_file - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º VK –ø—Ä–æ—Ñ–∏–ª–µ–π
/api_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

<b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>
- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK ID
- –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML-—Ñ–∞–π–ª–∞
- –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://vk.com/id123456
- –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /api_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(commands=["vk"])
async def cmd_vk(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vk"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º VK ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    cmd_parts = message.get_args().split()

    if not cmd_parts:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è ID
        await UserStates.waiting_for_vk_id.set()
        await message.answer(
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VK ID –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'id123456'.",
            reply_markup=get_cancel_keyboard()
        )
        return

    vk_id = cmd_parts[0]

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested VK ID search", vk_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        BOT_MESSAGES["processing"],
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = db.get_user_settings(user_id)

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ VK ID
        response = await process_vk_search(vk_id, user_id, user_settings)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_search_results(message.chat.id, vk_id, response, processing_msg.message_id, user_id)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "vk_id": vk_id})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except aiogram.utils.exceptions.MessageNotModified:
            pass
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await message.answer(BOT_MESSAGES["error"].format(error=str(e)))

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.message_handler(commands=["phone"])
async def cmd_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phone"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    cmd_parts = message.get_args().split()

    if not cmd_parts:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        await UserStates.waiting_for_phone.set()
        await message.answer(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789 –∏–ª–∏ 8-912-345-67-89.",
            reply_markup=get_cancel_keyboard()
        )
        return

    phone = cmd_parts[0]

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested phone search", phone)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=types.ReplyKeyboardRemove()
    )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        results = await process_phone_search(phone, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_phone_results(message.chat.id, phone, results, processing_msg.message_id)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "phone": phone})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await message.answer(BOT_MESSAGES["error"].format(error=str(e)))

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.message_handler(commands=["process_file"])
async def cmd_process_file(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /process_file"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested file processing")

    # Prompt the user to upload a file
    await message.answer(
        "üìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
        "–ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://vk.com/id123456 –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.",
        reply_markup=get_cancel_keyboard()
    )


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not message.document.mime_type or 'text' not in message.document.mime_type:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "uploaded a file for processing")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    download_msg = await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = downloaded_file.read().decode('utf-8', errors='ignore')
    except Exception as e:
        log_error(e, {"user_id": user_id, "file_id": file_id if 'file_id' in locals() else "unknown"})
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ
    lines = [line.strip() for line in file_content.split('\n') if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VK —Å—Å—ã–ª–æ–∫
    vk_links = extract_vk_links(file_content)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    name_dob_queries = []
    dob_pattern = re.compile(r'^\S+\s+\S+\s+\d{1,2}[./-]\d{1,2}[./-]\d{2,4}$')

    for line in lines:
        if dob_pattern.match(line) and line not in vk_links:
            name_dob_queries.append(line)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if vk_links and not name_dob_queries:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ VK —Å—Å—ã–ª–æ–∫
        await handle_vk_links_file(message, vk_links, user_id, download_msg)
    elif name_dob_queries and not vk_links:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        await handle_name_dob_file(message, name_dob_queries, user_id, download_msg)
    elif vk_links and name_dob_queries:
        # –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üîç –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ VK —Å—Å—ã–ª–∫–∏", callback_data=f"process_file:vk_links:{file_id}"),
            InlineKeyboardButton("üë§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                                 callback_data=f"process_file:name_dob:{file_id}")
        )

        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text=f"ü§î –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(vk_links)} VK —Å—Å—ã–ª–æ–∫ –∏ {len(name_dob_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=markup
        )
    else:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text="‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
                 "- –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (https://vk.com/id123456)\n"
                 "- –ò–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì'"
        )


async def handle_name_dob_file(message, queries, user_id, download_msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    max_queries = 500
    if len(queries) > max_queries:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text=f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ({len(queries)}). "
                 f"–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_queries}."
        )
        queries = queries[:max_queries]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
                 f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
                 f"‚ÑπÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e, {"action": "updating download message"})
        processing_msg = await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
            f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
            f"‚ÑπÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="HTML"
        )
        download_msg = processing_msg

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await asyncio.sleep(0.5)

    start_time = time.time()

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        results = await process_vk_links_advanced(
            queries,
            user_id,
            message.chat.id,
            download_msg.message_id,
            bot,
            db,
            is_name_dob_format=True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –§–ò–û + –î–†
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        processing_time = time.time() - start_time
        time_str = f"{int(processing_time // 60)} –º–∏–Ω {int(processing_time % 60)} —Å–µ–∫"

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_file_path = create_results_file(results)

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_with_phones = len([r for r in results if r[1] and len(r[1]) > 0])
        total_phones = sum(len(phones) for _, phones in results if phones)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        caption = (
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {time_str}.\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(results)}\n"
            f"- –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {results_with_phones}/{len(results)}\n"
            f"- –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {total_phones}\n\n"
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel —Ñ–∞–π–ª–µ (.xlsx)."
        )

        await bot.send_document(
            chat_id=message.chat.id,
            document=InputFile(result_file_path),
            caption=caption,
            parse_mode="HTML"
        )

    except Exception as e:
        log_error(e, {"user_id": user_id, "action": "batch processing", "details": str(e)})
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"- –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API\n"
            f"- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            f"- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_keyboard())


async def process_vk_links_advanced(queries, user_id, chat_id, message_id, bot_instance, db_instance,
                                    is_name_dob_format=False, *args):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ - –ª–∏–±–æ VK —Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å—ã –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è

    Args:
        queries (List[str]): –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id (int): ID —á–∞—Ç–∞
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        db_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        is_name_dob_format (bool): True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–ò–û + –î–†
        *args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        List[Tuple[str, List[str]]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∑–∞–ø—Ä–æ—Å, —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
    """
    from api_client import api_client  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç API

    if not queries:
        return []

    results = []
    total = len(queries)

    # Get user settings
    user_settings = db_instance.get_user_settings(user_id)

    # Track successful and failed requests
    success_count = 0
    fail_count = 0

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    can_edit_message = True
    update_message_id = message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ)

    # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    item_type = "–∑–∞–ø—Ä–æ—Å–æ–≤" if is_name_dob_format else "—Å—Å—ã–ª–æ–∫"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    async def safe_update_progress(text):
        nonlocal can_edit_message, update_message_id

        if can_edit_message:
            try:
                await bot_instance.edit_message_text(
                    chat_id=chat_id,
                    message_id=update_message_id,
                    text=text
                )
            except (aiogram.utils.exceptions.MessageCantBeEdited,
                    aiogram.utils.exceptions.MessageNotModified,
                    aiogram.utils.exceptions.MessageToEditNotFound) as e:
                logger.warning(f"Cannot edit message: {e}. Will send new messages for progress updates.")
                can_edit_message = False
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                new_msg = await bot_instance.send_message(
                    chat_id=chat_id,
                    text=text
                )
                update_message_id = new_msg.message_id
            except Exception as e:
                logger.error(f"Error updating progress message: {e}")
                can_edit_message = False
        else:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                new_msg = await bot_instance.send_message(
                    chat_id=chat_id,
                    text=text
                )
                update_message_id = new_msg.message_id
            except Exception as e:
                logger.error(f"Error sending progress message: {e}")

    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await safe_update_progress(f"üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ {total} {item_type}...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for i, query in enumerate(queries):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
        if i % 5 == 0 or i == 0 or i == len(queries) - 1:
            try:
                await bot_instance.edit_message_text(
                    chat_id=chat_id,
                    message_id=update_message_id,
                    text=f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i + 1}/{len(queries)} ({(i + 1) / len(queries) * 100:.1f}%)..."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        try:
            if is_name_dob_format:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –§–ò–û + –î–†
                search_result = await advanced_search(query, user_id, user_settings)
                phones = search_result.get("phones", [])
                results.append((query, phones))
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ VK —Å—Å—ã–ª–æ–∫ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                vk_id = extract_vk_id(query)
                if vk_id:
                    response = await process_vk_search(vk_id, user_id, user_settings)
                    phones = extract_phone_from_vk_parsing(response, vk_id)
                    results.append((query, phones))
                else:
                    results.append((query, []))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (is_name_dob_format and phones) or (not is_name_dob_format and vk_id and phones):
                success_count += 1
            else:
                fail_count += 1

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {query}: {e}")
            results.append((query, []))
            fail_count += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    phones_found = sum(1 for _, phones in results if phones and len(phones) > 0)
    total_phones = sum(len(phones) for _, phones in results if phones)

    await safe_update_progress(
        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(queries)} {item_type} (100%)\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count} | ‚ùå –û—à–∏–±–æ–∫: {fail_count}\n"
        f"üì± –ù–∞–π–¥–µ–Ω–æ {phones_found} –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ (–≤—Å–µ–≥–æ {total_phones} –Ω–æ–º–µ—Ä–æ–≤)"
    )

    return results

@dp.callback_query_handler(lambda c: c.data.startswith('process_file:'))
async def process_file_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    user_id = call.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
    parts = call.data.split(':')
    if len(parts) < 3:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    process_type = parts[1]
    file_id = parts[2]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)
        file_content = downloaded_file.read().decode('utf-8', errors='ignore')
    except Exception as e:
        log_error(e, {"user_id": user_id, "file_id": file_id})
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await call.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_msg = await call.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if process_type == "vk_links":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º VK —Å—Å—ã–ª–∫–∏
        links = extract_vk_links(file_content)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ VK —Å—Å—ã–ª–∫–∏
        await handle_vk_links_file(call.message, links, user_id, processing_msg)
    elif process_type == "name_dob":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        lines = [line.strip() for line in file_content.split('\n') if line.strip()]
        dob_pattern = re.compile(r'^\S+\s+\S+\s+\d{1,2}[./-]\d{1,2}[./-]\d{2,4}$')
        queries = [line for line in lines if dob_pattern.match(line)]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        await handle_name_dob_file(call.message, queries, user_id, processing_msg)

    await call.answer()

@dp.message_handler(state=UserStates.waiting_for_vk_id)
async def process_vk_id_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ VK ID –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    vk_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if vk_id.lower() == "–æ—Ç–º–µ–Ω–∞" or vk_id == "/cancel":
        await state.finish()
        await message.answer(
            "üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )
        return

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    await state.finish()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "submitted VK ID", vk_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        BOT_MESSAGES["processing"],
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = db.get_user_settings(user_id)

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ VK ID
        response = await process_vk_search(vk_id, user_id, user_settings)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            await send_search_results(message.chat.id, vk_id, response, processing_msg.message_id, user_id)
        except aiogram.utils.exceptions.MessageCantBeEdited as e:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ send_search_results –Ω–µ —Å–º–æ–≥ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            log_error(e, {"user_id": user_id, "vk_id": vk_id})

            formatted_message = formatter.format_telegram_message(response, vk_id)
            try:
                await message.answer(
                    formatted_message,
                    parse_mode="HTML"
                )
            except Exception as html_error:
                logger.error(f"Error sending HTML message: {html_error}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await message.answer(
                    html.unescape(formatted_message).replace("<b>", "").replace("</b>", "").replace("<i>", "").replace(
                        "</i>", "")
                )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "vk_id": vk_id})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except (aiogram.utils.exceptions.MessageCantBeEdited,
                aiogram.utils.exceptions.MessageNotModified,
                aiogram.utils.exceptions.MessageToEditNotFound) as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"Could not edit error message, sending new one: {edit_error}")
            await message.answer(
                BOT_MESSAGES["error"].format(error=str(e))
            )

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.message_handler(state=UserStates.waiting_for_phone)
async def process_phone_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    phone = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if phone.lower() == "–æ—Ç–º–µ–Ω–∞" or phone == "/cancel":
        await state.finish()
        await message.answer(
            "üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )
        return

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    await state.finish()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "submitted phone number", phone)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=types.ReplyKeyboardRemove()
    )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        results = await process_phone_search(phone, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_phone_results(message.chat.id, phone, results, processing_msg.message_id)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "phone": phone})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await message.answer(BOT_MESSAGES["error"].format(error=str(e)))

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.message_handler(commands=["settings"])
async def cmd_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "opened settings")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = db.get_user_settings(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = (
        "<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"üåê –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <code>{user_settings.get('language', 'ru')}</code>\n"
        f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: <code>{user_settings.get('results_per_page', 5)}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data=settings_cb.new(action="change_lang")),
        InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data=settings_cb.new(action="change_limit"))
    )

    await message.answer(settings_text, parse_mode="HTML", reply_markup=markup)


@dp.callback_query_handler(settings_cb.filter(action="change_lang"))
async def change_language(call: types.CallbackQuery, callback_data: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=lang_cb.new(value="ru")),
        InlineKeyboardButton("üá¨üáß English", callback_data=lang_cb.new(value="en"))
    )

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:",
        reply_markup=markup
    )
    await call.answer()


@dp.callback_query_handler(lang_cb.filter())
async def set_language(call: types.CallbackQuery, callback_data: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_id = call.from_user.id
    username = call.from_user.username
    lang = callback_data["value"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_settings(user_id, {"language": lang})

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, f"changed language to {lang}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings = db.get_user_settings(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = (
        "<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n\n"
        f"üåê –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <code>{user_settings.get('language', 'ru')}</code>\n"
        f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: <code>{user_settings.get('results_per_page', 5)}</code>\n"
    )

    await call.message.edit_text(
        settings_text,
        parse_mode="HTML"
    )
    await call.answer(BOT_MESSAGES["settings_updated"])

@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û + –î–†")
async def button_search_name_dob(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û + –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 01.01.2000</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@dp.callback_query_handler(settings_cb.filter(action="change_limit"))
async def change_limit(call: types.CallbackQuery, callback_data: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(
        InlineKeyboardButton("3", callback_data=limit_cb.new(value="3")),
        InlineKeyboardButton("5", callback_data=limit_cb.new(value="5")),
        InlineKeyboardButton("10", callback_data=limit_cb.new(value="10"))
    )

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        reply_markup=markup
    )
    await call.answer()


@dp.callback_query_handler(limit_cb.filter())
async def set_limit(call: types.CallbackQuery, callback_data: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–∏–º–∏—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = call.from_user.id
    username = call.from_user.username
    limit = int(callback_data["value"])

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_settings(user_id, {"results_per_page": limit})

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, f"changed results_per_page to {limit}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings = db.get_user_settings(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = (
        "<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n\n"
        f"üåê –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <code>{user_settings.get('language', 'ru')}</code>\n"
        f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: <code>{user_settings.get('results_per_page', 5)}</code>\n"
    )

    await call.message.edit_text(
        settings_text,
        parse_mode="HTML"
    )
    await call.answer(BOT_MESSAGES["settings_updated"])


@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in BOT_ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested status")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
    cache_stats = db.get_cache_stats()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    status_text = (
        "<b>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        f"üóÉ –ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ: <code>{cache_stats['total_entries']}</code>\n"
        f"üì± –ó–∞–ø–∏—Å–µ–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: <code>{cache_stats['phone_entries']}</code>\n"
        f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <code>{int(cache_stats['avg_response_size'] or 0)} –±–∞–π—Ç</code>\n"
        f"‚òéÔ∏è –í—Å–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: <code>{cache_stats['total_phones']}</code>\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö VK ID —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: <code>{cache_stats['unique_vk_ids']}</code>\n\n"
        "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if cache_stats['popular_queries']:
        for query in cache_stats['popular_queries']:
            status_text += f"- <code>{html.escape(query['query'])}</code> ({query['hit_count']} –∑–∞–ø—Ä–æ—Å–æ–≤)\n"
    else:
        status_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö\n"

    await message.answer(status_text, parse_mode="HTML")


async def check_api_status():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API

    Returns:
        Tuple[bool, str]: (—Å—Ç–∞—Ç—É—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ) - True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False
    """
    from api_client import api_client

    try:
        # –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_response = await asyncio.to_thread(
            api_client.make_request,
            query="test_connection",  # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            limit=10,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
            max_retries=1  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "error" in test_response:
            error_msg = test_response["error"]
            if "—Ç–∞–π–º-–∞—É—Ç" in error_msg.lower():
                return False, "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º-–∞—É—Ç)"
            elif "500" in error_msg:
                return False, "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 500)"
            else:
                return False, f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_msg}"

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏, API –¥–æ—Å—Ç—É–ø–µ–Ω
        return True, "API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"

    except Exception as e:
        logger.error(f"Error checking API status: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ API: {str(e)}"


@dp.message_handler(commands=["api_status"])
async def cmd_api_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /api_status - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested API status check")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    status_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    api_available, status_message = await check_api_status()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    if api_available:
        status_text = f"‚úÖ <b>API –¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n{status_message}\n\n–ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    else:
        status_text = f"‚ùå <b>API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n{status_message}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=status_text,
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e, {"action": "updating API status message"})
        await message.answer(status_text, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data.startswith('download_html:'))
async def download_html_file(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞"""
    user_id = call.from_user.id
    username = call.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ callback data
    filename = call.data.split(':', 1)[1]
    file_path = f"temp/{filename}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            chat_id=call.message.chat.id,
            document=InputFile(file_path),
            caption="üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_user_action(user_id, username, "downloaded HTML report", filename)

        await call.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        log_error(e, {"user_id": user_id, "filename": filename})
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith('search_vk:'))
async def handle_search_vk_from_phone(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ VK ID –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    user_id = call.from_user.id
    username = call.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º VK ID –∏–∑ callback data
    vk_id = call.data.split(':', 1)[1]

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "searched VK ID from phone results", vk_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await call.message.answer(
        BOT_MESSAGES["processing"],
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = db.get_user_settings(user_id)

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ VK ID
        response = await process_vk_search(vk_id, user_id, user_settings)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_search_results(call.message.chat.id, vk_id, response, processing_msg.message_id, user_id)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "vk_id": vk_id})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await call.message.answer(BOT_MESSAGES["error"].format(error=str(e)))

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await call.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.callback_query_handler(page_cb.filter())
async def handle_pagination(call: types.CallbackQuery, callback_data: Dict[str, str]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        query_id = callback_data["query_id"]
        page_id = int(callback_data["page_id"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if query_id not in cached_results:
            await call.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        results = cached_results[query_id]
        total_pages = len(results)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
        if page_id < 0:
            page_id = 0
        elif page_id >= total_pages:
            page_id = total_pages - 1

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        markup = create_pagination_keyboard(query_id, page_id, total_pages)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await call.message.edit_text(
                text=results[page_id],
                parse_mode="HTML",
                reply_markup=markup
            )
        except aiogram.utils.exceptions.MessageNotModified:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            pass
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            await call.message.edit_text(
                text=html.unescape(results[page_id]).replace("<b>", "").replace("</b>", "").replace("<i>", "").replace(
                    "</i>", ""),
                reply_markup=markup
            )

        await call.answer()

    except Exception as e:
        log_error(e, {"callback_data": callback_data})
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    phone = message.contact.phone_number

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "shared contact", phone)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=types.ReplyKeyboardRemove()
    )

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        results = await process_phone_search(phone, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_phone_results(message.chat.id, phone, results, processing_msg.message_id)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "phone": phone})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=BOT_MESSAGES["error"].format(error=str(e))
            )
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await message.answer(BOT_MESSAGES["error"].format(error=str(e)))

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ VK ID")
async def button_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ VK ID"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è VK ID
    await UserStates.waiting_for_vk_id.set()
    await message.answer(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VK ID –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'id123456'.",
        reply_markup=get_cancel_keyboard()
    )


@dp.message_handler(lambda message: message.text == "üì± –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
async def button_search_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await UserStates.waiting_for_phone.set()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–∑ –≤–∞—à–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏.",
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.text == "üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
async def button_process_file(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    await cmd_process_file(message)


@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def button_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await cmd_settings(message)


@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await cmd_help(message)


@dp.message_handler(lambda message: message.text.lower() == "–æ—Ç–º–µ–Ω–∞", state="*")
async def button_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()

    await message.answer(
        "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ "–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì"
    parts = text.split()
    is_name_dob_query = False

    if len(parts) >= 3:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –¥–∞—Ç–æ–π
        dob_pattern = re.compile(r'^\d{1,2}[./-]\d{1,2}[./-]\d{2,4}$')
        if dob_pattern.match(parts[-1]):
            is_name_dob_query = True

    if is_name_dob_query:
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /search
        message.text = f"/search {text}"
        await cmd_search(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ VK ID
    if _validate_vk_id(text):
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /vk
        message.text = f"/vk {text}"
        await cmd_vk(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    digits = ''.join(c for c in text if c.isdigit())
    if len(digits) >= 7:
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /phone
        message.text = f"/phone {text}"
        await cmd_phone(message)
        return

    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    await message.answer(
        "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì'\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å VK ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 –∏–ª–∏ id123456789)\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 123 456 78 90)\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
        "- –í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(commands=["search"])
async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    cmd_parts = message.get_args().split()

    if not cmd_parts or len(cmd_parts) < 3:  # –ú–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è, –ò–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        await message.answer(
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —É–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/search –§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /search –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 01.01.2000",
            reply_markup=get_main_keyboard()
        )
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    query = " ".join(cmd_parts)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested advanced search", query)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "üîç –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = db.get_user_settings(user_id)

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        from name_dob_search import standardize_russian_name, standardize_birth_date, \
            search_phone_by_name_and_birth_date
        from api_client import api_client  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç

        name_parts = query.split()
        if len(name_parts) >= 3:
            date_part = name_parts[-1]
            name_part = " ".join(name_parts[:-1])
            name_data = standardize_russian_name(name_part)
            birth_date = standardize_birth_date(date_part)
            logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞: {name_data}, –¥–∞—Ç–∞: {birth_date}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            results = await search_phone_by_name_and_birth_date(name_part, date_part, api_client)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = {
                "query": query,
                "phones": [],
                "method": "unknown",
                "confidence": 0.0,
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"
            }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        phones = results.get("phones", [])
        confidence = results.get("confidence", 0.0)
        method = results.get("method", "unknown")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –º–µ—Ç–æ–¥: {method}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        if phones:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
            message_text = (
                f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {html.escape(query)}\n\n"
                f"üì± <b>–ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:</b> {len(phones)}\n"
                f"üîç <b>–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:</b> {method_to_text(method)}\n"
                f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {int(confidence * 100)}%\n\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            for i, phone in enumerate(phones, 1):
                message_text += f"{i}. <code>{phone}</code>\n"
        else:
            # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            error_message = results.get("error", "–¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            message_text = f"‚ÑπÔ∏è {error_message} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=message_text,
                parse_mode="HTML"
            )
        except (aiogram.utils.exceptions.MessageCantBeEdited,
                aiogram.utils.exceptions.MessageNotModified,
                aiogram.utils.exceptions.CantParseEntities) as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            try:
                await message.answer(
                    text=message_text,
                    parse_mode="HTML"
                )
            except aiogram.utils.exceptions.CantParseEntities:
                # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                plain_text = message_text.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>",
                                                                                                            "").replace(
                    "<code>", "").replace("</code>", "")
                await message.answer(plain_text)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_error(e, {"user_id": user_id, "query": query})
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}\n{traceback.format_exc()}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = BOT_MESSAGES["error"].format(error=str(e))
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id,
                text=error_message
            )
        except (aiogram.utils.exceptions.MessageCantBeEdited,
                aiogram.utils.exceptions.MessageNotModified) as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {edit_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await message.answer(error_message)
        except Exception as edit_error:
            logger.error(f"Error handling error message: {edit_error}")
            await message.answer(error_message)

    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await asyncio.sleep(1)
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(commands=["process_name_dob"])
async def cmd_process_name_dob(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /process_name_dob –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "requested name+dob batch processing")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.answer(
        "üìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì'.\n\n"
        "–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 01.01.2000\n"
        "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä 15.05.2001",
        reply_markup=get_cancel_keyboard()
    )

def method_to_text(method, *args):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç

    Args:
        method (str): –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
        *args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
    """
    methods = {
        "name_dob_search": "–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "email_search": "–ü–æ–∏—Å–∫ –ø–æ email",
        "vk_search": "–ü–æ–∏—Å–∫ –ø–æ VK ID",
        "unknown": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫"
    }
    return methods.get(method, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥")

async def process_vk_search(vk_id: str, user_id: int, user_settings: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ VK ID

    Args:
        vk_id (str): VK ID –¥–ª—è –ø–æ–∏—Å–∫–∞
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings (Dict[str, Any]): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = user_settings.get("language", "ru")

    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏)
    loop = asyncio.get_event_loop()
    start_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç VK ID
    if not _validate_vk_id(vk_id):
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 'id123456'"}

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞ –∏–ª–∏ API
    response = await loop.run_in_executor(
        None,
        lambda: api_client.search_vk_id(vk_id, lang=lang)
    )

    processing_time = time.time() - start_time

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞
    cached = "error" not in response and "_meta" in response and response["_meta"].get("source") == "cache"

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.log_query(
        user_id=user_id,
        query=vk_id,
        api_called=not cached,
        cached=cached,
        status_code=200 if "error" not in response else 400,
        response_size=len(str(response)),
        processing_time=processing_time
    )

    return response


async def process_phone_search(phone: str, user_id: int) -> List[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    Args:
        phone (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    normalized_phone = ''.join(c for c in phone if c.isdigit())

    if len(normalized_phone) < 7:
        return []  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–µ –∏—â–µ–º

    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏)
    loop = asyncio.get_event_loop()
    start_time = time.time()

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    results = await loop.run_in_executor(
        None,
        lambda: db.search_phone_number(normalized_phone)
    )

    processing_time = time.time() - start_time

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.log_query(
        user_id=user_id,
        query=f"phone:{normalized_phone}",
        api_called=False,
        cached=True,
        status_code=200,
        response_size=len(str(results)),
        processing_time=processing_time
    )

    return results


async def send_search_results(chat_id: int, vk_id: str, response: Dict[str, Any], processing_msg_id: int = None,
                              user_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        vk_id (str): VK ID –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å
        response (Dict[str, Any]): –û—Ç–≤–µ—Ç API
        processing_msg_id (int, optional): ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_id (int, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if "error" in response:
        error_message = BOT_MESSAGES["error"].format(error=response["error"])

        if processing_msg_id:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_msg_id,
                    text=error_message
                )
            except (aiogram.utils.exceptions.MessageCantBeEdited,
                    aiogram.utils.exceptions.MessageNotModified,
                    aiogram.utils.exceptions.MessageToEditNotFound) as e:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"Could not edit message, sending new one: {e}")
                await bot.send_message(
                    chat_id=chat_id,
                    text=error_message
                )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=error_message
            )
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if "List" not in response or not response["List"] or list(response["List"].keys()) == ["No results found"]:
        no_results_message = BOT_MESSAGES["no_results"]

        if processing_msg_id:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_msg_id,
                    text=no_results_message
                )
            except (aiogram.utils.exceptions.MessageCantBeEdited,
                    aiogram.utils.exceptions.MessageNotModified,
                    aiogram.utils.exceptions.MessageToEditNotFound) as e:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"Could not edit message, sending new one: {e}")
                await bot.send_message(
                    chat_id=chat_id,
                    text=no_results_message
                )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=no_results_message
            )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    telegram_message = formatter.format_telegram_message(response, vk_id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª
    html_content = formatter.format_html(response, vk_id)
    file_path = formatter.save_html_file(html_content, vk_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Ñ–∞–π–ª–∞
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        "üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (HTML)",
        callback_data=f"download_html:{file_path.name}"
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if processing_msg_id:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=processing_msg_id,
                text=telegram_message,
                parse_mode="HTML",
                reply_markup=markup
            )
        except (aiogram.utils.exceptions.MessageCantBeEdited,
                aiogram.utils.exceptions.MessageNotModified,
                aiogram.utils.exceptions.MessageToEditNotFound,
                aiogram.utils.exceptions.CantParseEntities) as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"Could not edit message, sending new one: {e}")
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=telegram_message,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            except aiogram.utils.exceptions.CantParseEntities:
                # –ï—Å–ª–∏ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                plain_text = html.unescape(telegram_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                            "").replace(
                    "</i>", "").replace("<code>", "").replace("</code>", "")
                await bot.send_message(
                    chat_id=chat_id,
                    text=plain_text,
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"Unhandled error when sending search results: {e}")
            try:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                plain_text = html.unescape(telegram_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                            "").replace(
                    "</i>", "").replace("<code>", "").replace("</code>", "")
                await bot.send_message(
                    chat_id=chat_id,
                    text=plain_text,
                    reply_markup=markup
                )
            except Exception as last_error:
                logger.error(f"Failed to send results after all attempts: {last_error}")
    else:
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=telegram_message,
                parse_mode="HTML",
                reply_markup=markup
            )
        except aiogram.utils.exceptions.CantParseEntities:
            # –ï—Å–ª–∏ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plain_text = html.unescape(telegram_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                        "").replace(
                "</i>", "").replace("<code>", "").replace("</code>", "")
            await bot.send_message(
                chat_id=chat_id,
                text=plain_text,
                reply_markup=markup
            )


async def handle_vk_links_file(message, links, user_id, download_msg):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ —Å VK —Å—Å—ã–ª–∫–∞–º–∏

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ
        links (List[str]): –°–ø–∏—Å–æ–∫ VK —Å—Å—ã–ª–æ–∫
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        download_msg (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    """
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
    max_links = 500
    if len(links) > max_links:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text=f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ ({len(links)}). –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_links}."
        )
        links = links[:max_links]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=download_msg.message_id,
            text=f"üîç –ù–∞–π–¥–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
                 f"‚ÑπÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="HTML"
        )
    except Exception as e:
        log_error(e, {"action": "updating download message"})
        processing_msg = await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            parse_mode="HTML"
        )
        download_msg = processing_msg

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await asyncio.sleep(0.5)

    start_time = time.time()

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ process_vk_links
        results = await process_vk_links(
            links,
            user_id,
            message.chat.id,
            download_msg.message_id,
            bot,
            process_vk_search,
            db
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        processing_time = time.time() - start_time
        time_str = f"{int(processing_time // 60)} –º–∏–Ω {int(processing_time % 60)} —Å–µ–∫"

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_file_path = create_results_file(results)

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_with_phones = len([r for r in results if r[1] and len(r[1]) > 0])
        total_phones = sum(len(phones) for _, phones in results if phones)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        caption = (
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {time_str}.\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {len(results)}\n"
            f"- –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {results_with_phones}/{len(results)}\n"
            f"- –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {total_phones}\n\n"
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel —Ñ–∞–π–ª–µ (.xlsx)."
        )

        await bot.send_document(
            chat_id=message.chat.id,
            document=InputFile(result_file_path),
            caption=caption
        )

    except Exception as e:
        log_error(e, {"user_id": user_id, "action": "batch processing", "details": str(e)})
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"- –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API\n"
            f"- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫\n"
            f"- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_keyboard())

async def send_phone_results(chat_id: int, phone: str, results: List[Dict[str, Any]], processing_msg_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        phone (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        results (List[Dict[str, Any]]): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        processing_msg_id (int, optional): ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    if not results:
        no_results_message = "üìµ <b>–ü–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ VK ID."

        if processing_msg_id:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_msg_id,
                    text=no_results_message,
                    parse_mode="HTML"
                )
            except (aiogram.utils.exceptions.MessageCantBeEdited,
                    aiogram.utils.exceptions.MessageNotModified,
                    aiogram.utils.exceptions.MessageToEditNotFound,
                    aiogram.utils.exceptions.CantParseEntities) as e:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"Could not edit message, sending new one: {e}")
                try:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=no_results_message,
                        parse_mode="HTML"
                    )
                except aiogram.utils.exceptions.CantParseEntities:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=html.unescape(no_results_message).replace("<b>", "").replace("</b>", "")
                    )
        else:
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=no_results_message,
                    parse_mode="HTML"
                )
            except aiogram.utils.exceptions.CantParseEntities:
                await bot.send_message(
                    chat_id=chat_id,
                    text=html.unescape(no_results_message).replace("<b>", "").replace("</b>", "")
                )
        return

    # Format message with HTML
    message_parts = []
    message_parts.append(f"<b>üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ ({len(results)} —à—Ç.)</b>\n")

    # Group by VK ID
    vk_ids = {}
    for result in results:
        vk_id = result.get("vk_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if vk_id not in vk_ids:
            vk_ids[vk_id] = []
        vk_ids[vk_id].append(result)

    # Format results by VK ID
    for vk_id, vk_results in vk_ids.items():
        message_parts.append(f"\n<b>üë§ VK ID: {html.escape(vk_id)}</b>")

        # Add name if available
        if vk_results[0].get("full_name"):
            message_parts.append(f"üë§ –ò–º—è: {html.escape(vk_results[0]['full_name'])}")

        # Add source
        if vk_results[0].get("source"):
            message_parts.append(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {html.escape(vk_results[0]['source'])}")

    # Create keyboard for actions
    markup = InlineKeyboardMarkup(row_width=1)

    # Add buttons for quick search by VK ID
    for vk_id in list(vk_ids.keys())[:3]:
        if vk_id.isdigit() or (vk_id.startswith('id') and vk_id[2:].isdigit()):
            clean_id = vk_id[2:] if vk_id.startswith('id') else vk_id
            markup.add(InlineKeyboardButton(
                f"üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ VK ID: {vk_id}",
                callback_data=f"search_vk:{clean_id}"
            ))
            markup.add(InlineKeyboardButton(
                f"üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å VK: {vk_id}",
                url=f"https://vk.com/id{clean_id}"
            ))

    # Add timestamp
    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    message_parts.append(f"\n<i>‚è± –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {now}</i>")

    # Send message with results
    html_message = "\n".join(message_parts)

    if processing_msg_id:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=processing_msg_id,
                text=html_message,
                parse_mode="HTML",
                reply_markup=markup
            )
        except (aiogram.utils.exceptions.MessageCantBeEdited,
                aiogram.utils.exceptions.MessageNotModified,
                aiogram.utils.exceptions.MessageToEditNotFound,
                aiogram.utils.exceptions.CantParseEntities) as e:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"Could not edit message, sending new one: {e}")
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=html_message,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            except aiogram.utils.exceptions.CantParseEntities as html_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.error(f"Error sending with HTML: {html_error}")
                plain_text = html.unescape(html_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                        "").replace(
                    "</i>", "")
                await bot.send_message(
                    chat_id=chat_id,
                    text=plain_text,
                    reply_markup=markup
                )
            except Exception as send_error:
                logger.error(f"Failed to send message after edit failed: {send_error}")
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"Error sending phone results: {e}")
            try:
                plain_text = html.unescape(html_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                        "").replace(
                    "</i>", "")
                await bot.send_message(
                    chat_id=chat_id,
                    text=plain_text,
                    reply_markup=markup
                )
            except Exception as send_error:
                logger.error(f"Failed to send message after edit failed: {send_error}")
    else:
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=html_message,
                parse_mode="HTML",
                reply_markup=markup
            )
        except aiogram.utils.exceptions.CantParseEntities:
            plain_text = html.unescape(html_message).replace("<b>", "").replace("</b>", "").replace("<i>", "").replace(
                "</i>", "")
            await bot.send_message(
                chat_id=chat_id,
                text=plain_text,
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"Error sending phone results: {e}")
            try:
                plain_text = html.unescape(html_message).replace("<b>", "").replace("</b>", "").replace("<i>",
                                                                                                        "").replace(
                    "</i>", "")
                await bot.send_message(
                    chat_id=chat_id,
                    text=plain_text,
                    reply_markup=markup
                )
            except Exception as send_error:
                logger.error(f"Failed to send message: {send_error}")


def method_to_text(method, *args):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç

    Args:
        method (str): –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
        *args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
    """
    methods = {
        "name_dob_search": "–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "email_search": "–ü–æ–∏—Å–∫ –ø–æ email",
        "vk_search": "–ü–æ–∏—Å–∫ –ø–æ VK ID",
        "unknown": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫"
    }
    return methods.get(method, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥")


def _validate_vk_id(vk_id: str, *args) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ VK ID

    Args:
        vk_id (str): VK ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        *args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        bool: True, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏–Ω–∞—á–µ False
    """
    if not vk_id:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    if vk_id.isdigit():
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç id123456
    if vk_id.startswith('id') and vk_id[2:].isdigit():
        return True

    return False


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞

    Returns:
        ReplyKeyboardMarkup: –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û + –î–†"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ VK ID"))
    keyboard.add(KeyboardButton("üì± –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"), KeyboardButton("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"))
    keyboard.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    return keyboard


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard


def create_pagination_keyboard(query_id: str, current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Args:
        query_id (str): ID –∑–∞–ø—Ä–æ—Å–∞
        current_page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    markup = InlineKeyboardMarkup(row_width=3)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å row_width
    row = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_page > 0:
        row.append(InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=page_cb.new(query_id=query_id, page_id=current_page - 1)
        ))

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
    row.append(InlineKeyboardButton(
        f"{current_page + 1} / {total_pages}",
        callback_data="current_page"
    ))

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if current_page < total_pages - 1:
        row.append(InlineKeyboardButton(
            "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
            callback_data=page_cb.new(query_id=query_id, page_id=current_page + 1)
        ))

    markup.row(*row)
    return markup


def clean_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    current_time = time.time()
    to_delete = []

    for query_id in cached_results.keys():
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if query_id.startswith('timestamp_'):
            timestamp = float(query_id.split('_')[1])
            if current_time - timestamp > CACHE_CLEANUP_INTERVAL:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
                related_id = query_id.split('_', 2)[2]
                to_delete.append(related_id)
                to_delete.append(query_id)

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
    for key in to_delete:
        if key in cached_results:
            del cached_results[key]

    logger.info(f"Cleaned {len(to_delete)} cached results")


async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot started")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    formatter.cleanup_old_files()
    formatter.cleanup_old_json_files()

    # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞
    db.clean_expired_cache()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
    await register_bot_commands(dp.bot)


async def register_bot_commands(bot_instance):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        types.BotCommand("search", "–ü–æ–∏—Å–∫ –ø–æ –§–ò–û + –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"),
        types.BotCommand("vk", "–ü–æ–∏—Å–∫ –ø–æ VK ID"),
        types.BotCommand("phone", "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        types.BotCommand("process_file", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º VK –ø—Ä–æ—Ñ–∏–ª–µ–π"),
        types.BotCommand("process_name_dob", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –§–ò–û + –î–†"),
        types.BotCommand("api_status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞"),
        types.BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
        types.BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")
    ]

    try:
        await bot_instance.set_my_commands(commands)
        logger.info("Bot commands have been registered successfully")
    except Exception as e:
        logger.error(f"Error registering bot commands: {e}")


async def scheduled_jobs():
    """–ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞
    deleted_count = db.clean_expired_cache()
    logger.info(f"Scheduled job: Cleaned {deleted_count} expired cache entries")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    formatter.cleanup_old_files()
    logger.info("Scheduled job: Cleaned old temporary files")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
    formatter.cleanup_old_json_files()
    logger.info("Scheduled job: Cleaned old JSON files")

    # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    clean_cache()
    logger.info("Scheduled job: Cleaned old cached results")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def schedule_loop():
    """–¶–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    shutdown_event = threading.Event()

    while not shutdown_event.is_set():
        try:
            schedule.run_pending()
        except Exception as e:
            logger.error(f"Error in scheduler: {e}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    logger.info("Scheduler thread stopped")

    return shutdown_event  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞


async def advanced_search(query: str, user_id: int, user_settings: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º –ø–æ email

    Args:
        query (str): –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì"
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings (Dict[str, Any]): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    import time
    import re
    from file_processing import analyze_first_stage_results, analyze_second_stage_results, extract_phone_from_vk_parsing, extract_phones_from_api_response

    if not user_settings:
        user_settings = db.get_user_settings(user_id)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    results = {
        "query": query,
        "phones": [],
        "method": None,
        "confidence": 0.0,
        "stages_info": []
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    parts = query.split()
    dob_pattern = re.compile(r'^\d{1,2}[./-]\d{1,2}[./-]\d{2,4}$')

    # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    date_of_birth = ""
    surname = ""
    name = ""

    if len(parts) >= 3 and dob_pattern.match(parts[-1]):
        date_of_birth = parts[-1]
        name_parts = parts[:-1]
        surname = name_parts[0].lower()
        name = " ".join(name_parts[1:]).lower()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        if re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_of_birth):
            dob_parts = date_of_birth.split('.')
            iso_date = f"{dob_parts[2]}-{dob_parts[1]}-{dob_parts[0]}"
            standardized_date = iso_date
        else:
            standardized_date = date_of_birth

    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {surname} {name}, {date_of_birth}")

    data = {
        "surname": surname,
        "first_name": name,
        "patronymic": "",
        "full_name": f"{surname} {name}".strip()
    }

    logger.info(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞: {data}, –¥–∞—Ç–∞: {standardized_date}")

    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏)
    loop = asyncio.get_event_loop()
    start_time = time.time()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
    main_query = f"{data['surname']} {data['first_name']} {standardized_date}".strip()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {main_query}")

    # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    cache_key = f"name_dob:{main_query}:{user_settings.get('language', 'ru')}:{user_settings.get('limit', 300)}"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ—à–∞
        cached_response = db.get_cached_response(cache_key)
        if cached_response:
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {main_query}")
            # –£–¥–∞–ª—è–µ–º –∫–µ—à, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if "force_refresh" in query.lower() or "–æ–±–Ω–æ–≤–∏—Ç—å" in query.lower():
                db.delete_cached_response(cache_key)
                logger.info(f"–£–¥–∞–ª–µ–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                cached_response = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–µ—à–∞: {e}")
        cached_response = None

    # –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        first_stage_response = await loop.run_in_executor(
            None,
            lambda: api_client.search_by_name_dob(
                main_query,
                lang=user_settings.get("language", "ru"),
                limit=user_settings.get("limit", 300)
            )
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        results["stages_info"].append({
            "stage": "first_query",
            "query": main_query,
            "status": "completed"
        })

        # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        direct_phones = extract_phones_from_api_response(first_stage_response)
        if direct_phones:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(direct_phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä—è–º—ã–º –º–µ—Ç–æ–¥–æ–º")
            results["phones"] = direct_phones
            results["confidence"] = 0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞
            results["method"] = "direct_extract"
            return results

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        emails, phones, confidence, vk_ids = analyze_first_stage_results(first_stage_response, query)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
        results["phones"].extend(phones)
        results["confidence"] = confidence

        logger.info(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {len(phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, {len(emails)} email, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}")

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        if not phones and not emails:
            logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º")

            # –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è + –¥–∞—Ç–∞
            partial_query1 = f"{data['surname']} {standardized_date}".strip()
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º 1: {partial_query1}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            partial_cache_key1 = f"name_dob:{partial_query1}:{user_settings.get('language', 'ru')}:{user_settings.get('limit', 300)}"
            try:
                db.delete_cached_response(partial_cache_key1)
            except:
                pass

            partial_response1 = await loop.run_in_executor(
                None,
                lambda: api_client.search_by_name_dob(
                    partial_query1,
                    lang=user_settings.get("language", "ru"),
                    limit=user_settings.get("limit", 300)
                )
            )

            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            direct_phones1 = extract_phones_from_api_response(partial_response1)
            if direct_phones1:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(direct_phones1)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä—è–º—ã–º –º–µ—Ç–æ–¥–æ–º –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ 1")
                results["phones"] = direct_phones1
                results["confidence"] = 0.85  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                results["method"] = "direct_extract_partial1"
                return results

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            partial_emails1, partial_phones1, partial_confidence1, partial_vk_ids1 = analyze_first_stage_results(
                partial_response1, partial_query1)

            if partial_phones1 or partial_emails1:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ 1: {len(partial_phones1)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, {len(partial_emails1)} email")
                emails.extend([e for e in partial_emails1 if e not in emails])
                phones.extend([p for p in partial_phones1 if p not in phones])
                vk_ids.extend([v for v in partial_vk_ids1 if v not in vk_ids])
                confidence = max(confidence, partial_confidence1)

            # –í–∞—Ä–∏–∞–Ω—Ç 2: –¢–æ–ª—å–∫–æ –∏–º—è + –¥–∞—Ç–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
            if not direct_phones1 and not partial_phones1 and not partial_emails1 and data['first_name']:
                partial_query2 = f"{data['first_name']} {standardized_date}".strip()
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º 2: {partial_query2}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                partial_cache_key2 = f"name_dob:{partial_query2}:{user_settings.get('language', 'ru')}:{user_settings.get('limit', 300)}"
                try:
                    db.delete_cached_response(partial_cache_key2)
                except:
                    pass

                partial_response2 = await loop.run_in_executor(
                    None,
                    lambda: api_client.search_by_name_dob(
                        partial_query2,
                        lang=user_settings.get("language", "ru"),
                        limit=user_settings.get("limit", 300)
                    )
                )

                # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –æ—Ç–≤–µ—Ç–µ 2
                direct_phones2 = extract_phones_from_api_response(partial_response2)
                if direct_phones2:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(direct_phones2)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä—è–º—ã–º –º–µ—Ç–æ–¥–æ–º –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ 2")
                    results["phones"] = direct_phones2
                    results["confidence"] = 0.8  # –ï—â–µ –Ω–∏–∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    results["method"] = "direct_extract_partial2"
                    return results

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                partial_emails2, partial_phones2, partial_confidence2, partial_vk_ids2 = analyze_first_stage_results(
                    partial_response2, partial_query2)

                if partial_emails2 or partial_phones2:
                    logger.info(
                        f"–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ 2: {len(partial_phones2)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, {len(partial_emails2)} email")
                    emails.extend([e for e in partial_emails2 if e not in emails])
                    phones.extend([p for p in partial_phones2 if p not in phones])
                    vk_ids.extend([v for v in partial_vk_ids2 if v not in vk_ids])
                    confidence = max(confidence, partial_confidence2)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        results["phones"] = phones
        results["confidence"] = confidence

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if phones and confidence >= 0.7:
            results["method"] = "name_dob_search"
            return results

        # –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –ø–æ email (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
        if emails and (not phones or confidence < 0.7):
            logger.info(f"–≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –ø–æ email: {emails[0]}")

            # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è email-–∑–∞–ø—Ä–æ—Å–∞
            email_cache_key = f"email:{emails[0]}:{user_settings.get('language', 'ru')}:{user_settings.get('limit', 300)}"
            try:
                db.delete_cached_response(email_cache_key)
            except:
                pass

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É email
            second_stage_response = await loop.run_in_executor(
                None,
                lambda: api_client.make_request(
                    query=emails[0],
                    lang=user_settings.get("language", "ru"),
                    limit=2000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è email-–∑–∞–ø—Ä–æ—Å–∞
                    result_type="json"
                )
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            results["stages_info"].append({
                "stage": "email_query",
                "query": emails[0],
                "status": "completed"
            })

            # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ email-–∑–∞–ø—Ä–æ—Å
            email_phones = extract_phones_from_api_response(second_stage_response)
            if email_phones:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(email_phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä—è–º—ã–º –º–µ—Ç–æ–¥–æ–º –≤ email-–∑–∞–ø—Ä–æ—Å–µ")
                results["phones"] = email_phones
                results["confidence"] = 0.85  # –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è email-–∑–∞–ø—Ä–æ—Å–∞
                results["method"] = "email_direct_extract"
                return results

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            response_str = str(second_stage_response)
            logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ email (—Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏): {len(response_str)}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–º–µ—Ç–∫—É "–ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å"
            if "–ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å" in response_str:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–º–µ—Ç–∫–∞ '–ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å' –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ email")
                phone_pattern = re.compile(r'üìû–¢–µ–ª–µ—Ñ–æ–Ω:\s*(\d+)[^)]*–ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å')
                phone_matches = phone_pattern.findall(response_str)

                for phone in phone_matches:
                    if phone.startswith('79') and len(phone) == 11 and phone not in results["phones"]:
                        results["phones"].insert(0, phone)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
                        results["confidence"] = 0.95  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        results["method"] = "email_search_marked"
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω —Å –ø–æ–º–µ—Ç–∫–æ–π –≤ email-–∑–∞–ø—Ä–æ—Å–µ: {phone}")

            # –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ email
            phone_pattern = re.compile(r'üìû–¢–µ–ª–µ—Ñ–æ–Ω:\s*(\d+)')
            phone_matches = phone_pattern.findall(response_str)

            for phone in phone_matches:
                if phone.startswith('79') and len(phone) == 11 and phone not in results["phones"]:
                    results["phones"].append(phone)
                    if results["confidence"] < 0.8:
                        results["confidence"] = 0.8  # –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        results["method"] = "email_search"
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –≤ email-–∑–∞–ø—Ä–æ—Å–µ: {phone}")

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if results["phones"]:
                return results

        # –≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ –ø–æ VK ID (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
        if vk_ids and not results["phones"]:
            logger.info(f"–≠–¢–ê–ü 3: –ü–æ–∏—Å–∫ –ø–æ VK ID: {vk_ids[0]}")

            # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è VK ID-–∑–∞–ø—Ä–æ—Å–∞
            vk_cache_key = f"vk:{vk_ids[0]}:{user_settings.get('language', 'ru')}:{user_settings.get('limit', 300)}"
            try:
                db.delete_cached_response(vk_cache_key)
            except:
                pass

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ VK ID
            vk_response = await process_vk_search(vk_ids[0], user_id, user_settings)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            results["stages_info"].append({
                "stage": "vk_id_query",
                "query": vk_ids[0],
                "status": "completed"
            })

            # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ VK ID-–∑–∞–ø—Ä–æ—Å
            vk_direct_phones = extract_phones_from_api_response(vk_response)
            if vk_direct_phones:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(vk_direct_phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä—è–º—ã–º –º–µ—Ç–æ–¥–æ–º –≤ VK ID-–∑–∞–ø—Ä–æ—Å–µ")
                results["phones"] = vk_direct_phones
                results["confidence"] = 0.8  # –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è VK ID
                results["method"] = "vk_direct_extract"
                return results

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            vk_phones = extract_phone_from_vk_parsing(vk_response, vk_ids[0])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            for phone in vk_phones:
                if phone not in results["phones"]:
                    results["phones"].append(phone)

            if vk_phones:
                results["method"] = "vk_search"
                results["confidence"] = 0.7  # –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è VK ID
                return results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        logger.error(traceback.format_exc())
        return {
            "query": query,
            "phones": [],
            "method": None,
            "confidence": 0.0,
            "error": str(e)
        }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return results


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not db.check_database_health():
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            with db.get_connection() as conn:
                db.create_tables(conn)
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if not db.check_database_health():
                logger.critical("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                sys.exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00
        schedule.every().day.at("03:00").do(lambda: asyncio.run(scheduled_jobs()))
        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(clean_cache)

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=schedule_loop)
        scheduler_thread.daemon = True
        scheduler_thread.start()

        logger.info("Starting bot...")
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True)

    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.critical(traceback.format_exc())